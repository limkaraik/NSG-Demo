{"version":3,"sources":["common/common.ts","main/play.tsx","main/create.tsx","main/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Robber","Icon","iconUrl","iconSize","Jail","Police","Exit","Create","useState","attackerPos","setAttackerPos","initAttackerPos","setInitAttackerPos","data","setData","graph","setGraph","position","setPosition","successRead","setSuccessRead","Set","edges","setEdges","Defenders","setDefenders","initDefenders","setInitDefenders","exits","setExits","playing","setPlaying","caught","setCaught","won","setWon","map","setMap","timeLeft","setTimeLeft","initTimeLeft","setInitTimeLeft","apiURL","setApiURL","readFile","file","reader","FileReader","onload","event","target","result","a","JSON","parse","message","error","readAsText","renderGraph","undefined","Error","pos","key","n","parseInt","tempDefs","d","toString","add","tempExits","n1","n2","key2","k1","k2","edge","setView","err","resetGame","play","axios","create","baseURL","headers","get","then","res","console","log","success","catch","_","SideMenu","style","marginTop","direction","accept","maxCount","beforeUpload","icon","UploadOutlined","type","onClick","disabled","danger","span","Item","label","onChange","e","currentTarget","value","MapContainer","center","whenCreated","zoom","doubleClickZoom","scrollWheelZoom","width","height","marginLeft","TileLayer","attribution","url","Object","keys","val","i","CircleMarker","fillOpacity","interactive","eventHandlers","dblclick","node","has","defenders","s","time","info","click","Popup","size","Array","from","index","Polyline","positions","Marker","stateSelection","setStateSelection","nodes","setNodes","firstNode","setFirstNode","edgeNodeSelection","setEdgeNodeSelection","attacker","setAttacker","timeHorizon","setTimeHorizon","document","onkeyup","Update","useMapEvents","latlng","lat","lng","next","forEach","delete","newEdges","newDef","newExits","onSwitchChange","onChangeStateSelection","onClickReset","onClickCreateGraph","count","push","createElement","href","URL","createObjectURL","Blob","stringify","setAttribute","body","appendChild","removeChild","onTimeHorizonChange","Group","optionType","buttonStyle","Button","defaultChecked","checkedChildren","unCheckedChildren","checked","min","max","defaultValue","Header","Layout","Content","Footer","Main","className","theme","mode","to","padding","exact","path","component","Play","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e60c0714.chunk.js","sourcesContent":["import {Icon} from \"leaflet\";\r\n\r\nexport const Robber = new Icon({\r\n    iconUrl: \"./robber.png\",\r\n    iconSize: [25, 25]\r\n  });\r\n\r\nexport const Jail = new Icon({\r\niconUrl: \"./jail.png\",\r\niconSize: [25, 25]\r\n});\r\n\r\nexport const Police = new Icon({\r\n    iconUrl: \"./police.png\",\r\n    iconSize: [25, 25]\r\n    });\r\n\r\nexport const Exit = new Icon({\r\n  iconUrl: \"./exit.png\",\r\n  iconSize: [25, 25]\r\n  });\r\n\r\n","import React,{useState} from 'react';\r\nimport { Row, Col, Space, message, Button, Upload, Input, Form} from 'antd';\r\nimport { MapContainer, TileLayer, Marker,  CircleMarker, Polyline, Popup} from 'react-leaflet';\r\nimport { Robber,Police,Exit,Jail } from '../common/common';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport axios, { AxiosInstance } from 'axios';\r\nimport L from 'leaflet'\r\nimport './map.css';\r\n\r\nconst Create : React.FC = () =>{\r\n    const [attackerPos,setAttackerPos] = useState(-1)\r\n    const [initAttackerPos,setInitAttackerPos] = useState(-1)\r\n    const [data,setData] = useState<Object>({})\r\n    const [graph,setGraph]= useState<Object>()\r\n    const [position,setPosition] = useState<Object>({})\r\n    const [successRead,setSuccessRead] = useState(false)\r\n    const [edges,setEdges] = useState<Set<[number,number,number,number]>>(new Set());\r\n    const [Defenders,setDefenders] = useState<Set<number>>();\r\n    const [initDefenders,setInitDefenders] = useState<Set<number>>();\r\n    const [exits,setExits] = useState<Set<number>>();\r\n    const [playing,setPlaying] = useState(false)\r\n    const [caught,setCaught] = useState(false)\r\n    const [won,setWon] = useState(false)\r\n    const [map, setMap] = useState<L.Map>()\r\n    const [timeLeft,setTimeLeft] = useState(0)\r\n    const [initTimeLeft,setInitTimeLeft] = useState(0)\r\n    const [apiURL,setApiURL] = useState<string>(\"\")\r\n    var API: AxiosInstance;\r\n\r\n    const readFile = (file)=>{\r\n        var reader = new FileReader();\r\n        reader.onload = function(event) {\r\n            if (event.target?.result && typeof event.target?.result===\"string\"){\r\n                var a = JSON.parse(event.target?.result)\r\n                setSuccessRead(true)\r\n                setData(a)\r\n            }else{\r\n                setSuccessRead(false)\r\n                message.error(\"Failed to read file!\")\r\n            }\r\n            \r\n        }\r\n        reader.readAsText(file)\r\n        \r\n        return false\r\n    }\r\n\r\n    const move = (node: number)=>{\r\n        if (!playing || caught || won ){\r\n            return\r\n        }\r\n        if (graph && graph[attackerPos].has(node)){\r\n            API = axios.create({\r\n                baseURL: apiURL,\r\n                headers: {\r\n                    \"Content-type\": \"application/json\"\r\n                }\r\n            });\r\n            API.get(`api/move?node=${node}`).then((res) => {\r\n                const { success, defenders} = res.data;\r\n                console.log(\"Response Data\",res.data)\r\n                if (success){\r\n                    let s:Set<number> = new Set(defenders)\r\n                    console.log(\"New Defenders Position\",s)\r\n                    setDefenders(s)\r\n                    setAttackerPos(node)\r\n                    let time = timeLeft-1\r\n                    setTimeLeft(time)\r\n                    //call api\r\n                    if (s && s.has(node)){\r\n                        setCaught(true)\r\n                        message.info(\"You have lost :-(\")\r\n                    }else if (exits && exits.has(node)){\r\n                        setWon(true)\r\n                        message.success(\"You have won!\")\r\n                    }else if (time===0){\r\n                        setWon(true)\r\n                        message.info(\"You have lost :-(\")\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const renderGraph = ()=>{\r\n        setAttackerPos(-1)\r\n        setInitAttackerPos(-1)\r\n        setDefenders(undefined)\r\n        setPosition({})\r\n        setGraph(undefined)\r\n        setExits(undefined)\r\n        setEdges(new Set())\r\n        try{\r\n            if (data['timeHorizon']===undefined){\r\n                throw(Error(\"invalid data in json file\"))\r\n            }\r\n            setTimeLeft(data['timeHorizon'])\r\n            setInitTimeLeft(data['timeHorizon'])\r\n            var pos = {}\r\n            setPosition(data['position'])\r\n            for  (let key in data['position']){\r\n                let n = parseInt(key,10)\r\n                if (data['position'][key]===undefined){\r\n                    throw(Error(\"invalid data in json file\"))\r\n                }\r\n                pos[n]= data['position'][key]\r\n            }\r\n            setPosition(pos)\r\n            let tempDefs:Set<number> = new Set()\r\n            for (let d in data['defenders']){\r\n                let key = data['defenders'][d].toString()\r\n                if (data['position'][key]===undefined){\r\n                    throw(Error(\"invalid data in json file\"))\r\n                }\r\n                tempDefs.add(data['defenders'][d])\r\n            }\r\n            setDefenders(tempDefs)\r\n            setInitDefenders(tempDefs)\r\n            let tempExits:Set<number> = new Set()\r\n            for (let d in data['exits']){\r\n                let key = data['exits'][d].toString()\r\n                if (data['position'][key]===undefined){\r\n    \r\n                    throw(Error(\"invalid data in json file\"))\r\n                }\r\n                tempExits.add(data['exits'][d])\r\n            }\r\n            setExits(tempExits)\r\n            \r\n            let key = data['attacker'].toString()\r\n            if (data['position'][key]===undefined){\r\n                throw(Error(\"invalid data in json file\"))\r\n            }\r\n            setAttackerPos(data['attacker'])\r\n            setInitAttackerPos(data['attacker'])\r\n            let graph = {}\r\n            for  (let key in data['graph']){\r\n                let n1 = parseInt(key,10)\r\n                let n2 = 0\r\n                for (let key2 in data['graph'][key]){\r\n                    n2= data['graph'][key][key2]\r\n                    if (graph[n1]===undefined){\r\n                        graph[n1]= new Set()\r\n                    }\r\n                    graph[n1].add(n2)\r\n                    if (n1!==n2){\r\n                        let k1 = n1.toString()\r\n                        let k2 = n2.toString()\r\n                        if (data['position'][k1]===undefined ||data['position'][k2]===undefined ){\r\n                            throw(Error(\"invalid data in json file\"))\r\n                        }\r\n                        let edge:[number,number,number,number] = [data['position'][k1][0],data['position'][k1][1],data['position'][k2][0],data['position'][k2][1]]\r\n                        setEdges(edges => new Set(edges).add(edge))\r\n                    }\r\n                }\r\n            }\r\n            if (map){\r\n              map.setView(data['position'][data['attacker']],13)\r\n            }\r\n            setGraph(graph)\r\n        }catch(err){\r\n            message.error(\"Failed to render graph, invalid data in json file\")\r\n        }\r\n    }\r\n \r\n    const resetGame = ()=>{\r\n        setAttackerPos(initAttackerPos)\r\n        setPlaying(false)\r\n        setCaught(false)\r\n        setWon(false)\r\n        setDefenders(initDefenders)\r\n        setTimeLeft(initTimeLeft)\r\n    }\r\n\r\n    const play= ()=>{\r\n        if (attackerPos!==-1){\r\n            API = axios.create({\r\n                baseURL: apiURL,\r\n                headers: {\r\n                    \"Content-type\": \"application/json\"\r\n                }\r\n            });\r\n            API.get('api/reset').then((res) => {\r\n                console.log(res)\r\n                const { success} = res.data;\r\n                if (success){\r\n                    setPlaying(true)\r\n                }else{\r\n                    message.error(\"Error server response\")\r\n                }\r\n            }).catch(_=>{message.error(\"Unable to connect to server\")})\r\n\r\n        }\r\n    }\r\n\r\n    const onApiURLChange = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n        setApiURL(e.currentTarget.value)\r\n    }\r\n\r\n    const SideMenu = () =>{\r\n        return (\r\n            <div style={{marginTop:20}}>\r\n                <h1>Upload </h1>\r\n                <Col>\r\n                <Space direction=\"vertical\">\r\n                    <Upload\r\n                    accept=\"application/json\"\r\n                    maxCount={1}\r\n                    beforeUpload={readFile}\r\n                    > \r\n                        <Button icon={<UploadOutlined />}>Upload (Max: 1)</Button>\r\n                    </Upload>\r\n                    <Button\r\n                    type=\"primary\"\r\n                    onClick={renderGraph}\r\n                    disabled={!successRead}\r\n                    >\r\n                    Render Graph\r\n                    </Button>\r\n                    \r\n                    <Row>\r\n                    <Space>\r\n                        <Button\r\n                        type=\"primary\"\r\n                        onClick={play}\r\n                        disabled={!successRead || playing}\r\n                        >\r\n                        Play\r\n                        </Button>\r\n                        <Button\r\n                        danger\r\n                        type=\"primary\"\r\n                        onClick={resetGame}\r\n                        disabled={!successRead}\r\n                        >\r\n                        Reset Game\r\n                        </Button>\r\n                    </Space>\r\n                    </Row>\r\n                    {\r\n                        playing &&\r\n                        <Row>\r\n                            <h3>Time Left: {timeLeft}</h3>\r\n                        </Row>\r\n                    }\r\n                    \r\n                </Space>\r\n                </Col>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={9}>\r\n                    <SideMenu/>\r\n                    <br/>\r\n                    <Form >\r\n                    <Form.Item\r\n                        label=\"API URL\"\r\n                    >\r\n                        <Input onChange={onApiURLChange} value={apiURL} />\r\n                    </Form.Item> \r\n                    </Form>\r\n                    <br/>\r\n                <h1>Instuctions </h1>\r\n                <ul>\r\n                    <li>Upload the json file you get when create graph and render graph</li>\r\n                    <li>Input the server URL. Server template can be found in the link below.</li>\r\n                    <li>Click Play to start playing</li>\r\n                    <li>Double click on the map to select the next node the move</li>\r\n                    <li>Click on the node to view the node number based on the json graph</li>\r\n                    <li>For more details and server template, visit: https://github.com/limkaraik/NSG-Server-Template</li>\r\n                    <li>Sample server and json file can be found here: https://github.com/limkaraik/NSG-sample-server</li>\r\n                </ul>\r\n                </Col>\r\n                <Col span = {15}>\r\n                \r\n                    <MapContainer center={[51.505, -0.09]} whenCreated={setMap} zoom={13} doubleClickZoom={false} scrollWheelZoom={true} style={{width:800, height:650, marginLeft:100, marginTop:20}}>\r\n                        <TileLayer\r\n                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        {/* render nodes*/ \r\n                            position &&\r\n                            Object.keys(position).map((val,i)=>(\r\n                                <CircleMarker center={position[val]} key={val} fillOpacity={0.7} interactive={true} eventHandlers={{ dblclick:(e) =>{\r\n                                    move(parseInt(val,10))\r\n                                }, click:(e)=>{}}}>\r\n                                    <Popup>\r\n                                        Node {val}\r\n                                    </Popup>\r\n                                </CircleMarker>\r\n                            ))\r\n                        }\r\n                        {/* render edges*/ \r\n                            edges.size>0 &&\r\n                            Array.from(edges).map((edge,index) =>(\r\n                                <Polyline  key={index} positions={[[edge[0],edge[1]],[edge[2],edge[3]]]}/>\r\n                            ))\r\n                        }\r\n                        {/* render exits*/ \r\n                            exits &&\r\n                            Array.from(exits).map((pos,i)=>(\r\n                                <Marker position={position[pos]} key={i}  interactive={false} icon={caught && pos===attackerPos ? Jail: Exit}/>\r\n                            ))\r\n                        }\r\n                        {/* render defenders*/ \r\n                            Defenders &&\r\n                            Array.from(Defenders).map((pos,i)=>(\r\n                                <Marker position={position[pos]} key={i}  interactive={false} icon={caught && pos===attackerPos ? Jail: Police}/>\r\n                            ))\r\n                        }\r\n                        {/* render attacker*/ \r\n                            attackerPos!==-1 && <Marker position={position[attackerPos]} icon={caught ? Jail: Robber} interactive={false}/>\r\n                        }\r\n                        \r\n                    </MapContainer>\r\n             \r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","import React,{useState} from 'react';\r\nimport { Row, Col, Radio, Space, Switch, message, Button, InputNumber} from 'antd';\r\nimport { MapContainer, TileLayer, Marker, useMapEvents, CircleMarker, Polyline} from 'react-leaflet';\r\nimport { Robber,Police,Exit } from '../common/common';\r\nimport './map.css';\r\n\r\nconst Create : React.FC = () =>{\r\n    const [stateSelection, setStateSelection] = useState(1);\r\n    const [nodes,setNodes] = useState<Set<[number,number]>>(new Set());\r\n    const [edges,setEdges] = useState<Set<[number,number,number,number]>>(new Set());\r\n    const [firstNode, setFirstNode] = useState<[number,number]>();\r\n    const [edgeNodeSelection, setEdgeNodeSelection] = useState(false);\r\n    const [defenders,setDefenders] = useState<Set<[number,number]>>(new Set());\r\n    const [exits,setExits] = useState<Set<[number,number]>>(new Set());\r\n    const [attacker,setAttacker] = useState<[number,number]>();\r\n    const [timeHorizon, setTimeHorizon] = useState(10);\r\n\r\n    const toggle = (e)=>{\r\n        if (e.key==='a'){\r\n            setEdgeNodeSelection(!edgeNodeSelection)\r\n        }\r\n    }\r\n    document.onkeyup = toggle;\r\n\r\n    const Update = () => {\r\n\r\n        const map = useMapEvents({\r\n            dblclick(e) {  \r\n                let pos:[number,number] = [e.latlng.lat,e.latlng.lng] \r\n                if (stateSelection ===1){\r\n                    setNodes(nodes => new Set(nodes).add(pos))    \r\n                }else if ((stateSelection ===2)){\r\n                    setNodes(nodes => {\r\n                        const next = new Set(nodes);\r\n                        next.forEach((val) => {\r\n                            if (val[0]===pos[0] && val[1]===pos[1]){\r\n                                next.delete(val) //delete node from nodes\r\n                                //if node contain edges delete edges\r\n                                setEdges(edges => {\r\n                                    const newEdges = new Set(edges);\r\n                                    newEdges.forEach(edge => ((edge[0]===pos[0] && edge[1]===pos[1]) ||\r\n                                        (edge[2]===pos[0] && edge[3]===pos[1]))\r\n                                        ? newEdges.delete(edge) : edge)\r\n                                    return newEdges;\r\n                                });\r\n                                //if deleted node is defender delete defender\r\n                                setDefenders(defenders => {\r\n                                    const newDef = new Set(defenders);\r\n                                    newDef.delete(val)\r\n                                    return newDef;\r\n                                });\r\n                                //if deleted node is exit delete exit\r\n                                setExits(exits => {\r\n                                    const newExits = new Set(exits);\r\n                                    newExits.delete(val)\r\n                                    return newExits;\r\n                                });\r\n                                //if deleted node is attacker delete attacker\r\n                                if (attacker && attacker[0]===val[0] && attacker[1]===val[1]){\r\n                                    setAttacker(undefined)\r\n                                }\r\n                            }\r\n                        })\r\n                        return next;\r\n                    });\r\n                }\r\n            },\r\n            click(e){\r\n                let pos:[number,number] = [e.latlng.lat,e.latlng.lng] \r\n                //add or delete edge\r\n                if ((stateSelection ===3 || stateSelection ===4)){\r\n                    nodes.forEach((val)=>{\r\n                        if (val[0]===pos[0] && val[1]===pos[1]){\r\n                            if (edgeNodeSelection === false){ //to select source node\r\n                                setFirstNode(pos)\r\n                                message.info(\"Source Node Selected\")\r\n                            }else{ //select target node\r\n                                if (firstNode===undefined){\r\n                                    message.error(\"Select the Source Node First\")\r\n                                }else if (stateSelection===3 && (firstNode[0]!==pos[0] || firstNode[1]!==pos[1]) ){\r\n                                    let edge:[number,number,number,number] = [firstNode[0], firstNode[1],pos[0],pos[1]]\r\n                                    setEdges(edges => new Set(edges).add(edge))\r\n                                }else if (stateSelection===4){\r\n                                    setEdges(edges => {\r\n                                        const next = new Set(edges);\r\n                                        next.forEach(val => ((val[0]===pos[0] && val[1]===pos[1] && val[2]===firstNode[0] && val[3]===firstNode[1]) ||\r\n                                            (val[2]===pos[0] && val[3]===pos[1] && val[0]===firstNode[0] && val[1]===firstNode[1]))\r\n                                            ? next.delete(val) : val)\r\n                                        return next;\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n            }else if ((stateSelection ===5 || stateSelection ===6)){ //add or delete defenders\r\n                nodes.forEach((val)=>{\r\n                    if (val[0]===pos[0] && val[1]===pos[1]){\r\n                        if (stateSelection===5){\r\n                            setDefenders(defenders => new Set(defenders).add(val))  \r\n                        }else{\r\n                            setDefenders(defenders => {\r\n                                const next = new Set(defenders);\r\n                                next.delete(val)\r\n                                return next;\r\n                            });\r\n                        }\r\n                        \r\n                    }\r\n                })\r\n            }else if ((stateSelection ===7 || stateSelection ===8)){ //add or delete exits\r\n                nodes.forEach((val)=>{\r\n                    if (val[0]===pos[0] && val[1]===pos[1]){\r\n                        if (stateSelection===7){\r\n                            setExits(exits => new Set(exits).add(val))  \r\n                        }else{\r\n                            setExits(exits => {\r\n                                const next = new Set(exits);\r\n                                next.delete(val)\r\n                                return next;\r\n                            });\r\n                        }\r\n                        \r\n                    }\r\n                })\r\n            }else if ((stateSelection ===9)){ //set attacker\r\n                nodes.forEach((val)=>{\r\n                    if (val[0]===pos[0] && val[1]===pos[1]){\r\n                        setAttacker(val)\r\n                    }\r\n                })\r\n            }\r\n            },\r\n        })\r\n        return (\r\n            null\r\n        )   \r\n        \r\n    }\r\n\r\n    const onSwitchChange = (e)=>{\r\n        setEdgeNodeSelection(e)\r\n    };\r\n\r\n    const onChangeStateSelection = (e) => {\r\n        setStateSelection(e.target.value)\r\n      };\r\n\r\n    const onClickReset= ()=>{\r\n        setNodes(new Set())\r\n        setEdges(new Set())\r\n        setDefenders(new Set())\r\n        setExits(new Set())\r\n        setAttacker(undefined)\r\n        setFirstNode(undefined)\r\n    }\r\n\r\n    const onClickCreateGraph = ()=>{\r\n        let data = {\"graph\":{},\r\n            \"position\":{},\r\n            \"defenders\":new Array(),\r\n            \"attacker\":-1,\r\n            \"exits\":new Array(),\r\n            \"timeHorizon\":timeHorizon,\r\n        }\r\n\r\n        let count = 1;\r\n        nodes.forEach((val)=>{\r\n            data[\"position\"][count]= val\r\n            data['graph'][count] = [count]\r\n            if (defenders.has(val)){\r\n                data['defenders'].push(count)\r\n            }\r\n            if (exits.has(val)){\r\n                data['exits'].push(count)\r\n            }\r\n            if (attacker && attacker[0]===val[0] && attacker[1]===val[1]){\r\n                data['attacker'] = count\r\n            }\r\n            count++\r\n        })\r\n\r\n        edges.forEach((edge)=>{\r\n            let n1 = 0\r\n            let n2 = 0\r\n            for  (let key in data['position']){\r\n                let pos = data['position'][key]\r\n                if (pos[0]===edge[0] && pos[1]===edge[1]){\r\n                    n1 = parseInt(key,10)\r\n                }else if (pos[0]===edge[2] && pos[1]===edge[3]){\r\n                    n2 = parseInt(key,10)\r\n                }                \r\n            }\r\n            if (n1!==0 && n2!==0){\r\n                let a:Array<number> = data['graph'][n1]\r\n                a.push(n2)\r\n                a= data['graph'][n2]\r\n                a.push(n1)\r\n            }\r\n            \r\n        })\r\n        const a = document.createElement(\"a\");\r\n  \r\n        a.href = URL.createObjectURL(new Blob([JSON.stringify(data, null, 2)], {\r\n            type: \"application/json\"\r\n          }));\r\n        a.setAttribute(\"download\", \"data.json\");\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n\r\n    }\r\n\r\n    const onTimeHorizonChange = (value: number)=>{\r\n        setTimeHorizon(value)\r\n    }\r\n\r\n    const SideMenu = () =>{\r\n        return (\r\n            <div style={{marginTop:20}}>\r\n                <h1>Select Action </h1>\r\n                <Space direction='vertical'>\r\n                <Row>\r\n                    <Radio.Group\r\n                    onChange={onChangeStateSelection}\r\n                    value={stateSelection}\r\n                    optionType=\"button\"\r\n                    buttonStyle=\"solid\"\r\n                    >\r\n                        <Space direction='vertical'>\r\n                        <Row>\r\n                            <Radio.Button value={1} style={{ width: 150 }}>Add Nodes</Radio.Button>\r\n                            <Radio.Button value={2} style={{ width: 150 }}>Delete Nodes</Radio.Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <Radio.Button value={3} style={{ width: 150 }}>Add Edges</Radio.Button>\r\n                            <Radio.Button value={4} style={{ width: 150 }}>Delete Edges</Radio.Button>\r\n                            <Switch defaultChecked={false} checkedChildren={'Target'} unCheckedChildren={'Source'} onChange={onSwitchChange} checked={edgeNodeSelection} style={{marginLeft:20, marginTop:5}}/>\r\n                        </Row>\r\n                        <Row>\r\n                            <Radio.Button value={5} style={{ width: 150 }}>Add Defenders</Radio.Button>\r\n                            <Radio.Button value={6} style={{ width: 150 }}>Delete Defenders</Radio.Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <Radio.Button value={7} style={{ width: 150 }}>Add Exits</Radio.Button>\r\n                            <Radio.Button value={8} style={{ width: 150 }}>Delete Exits</Radio.Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <Radio.Button value={9} style={{ width: 150 }}>Set Attacker</Radio.Button>\r\n                        </Row>\r\n                        </Space>\r\n                    </Radio.Group>\r\n                </Row>\r\n                <Row>\r\n                    <Space>\r\n                        <h3>Time Horizon</h3>\r\n                        <InputNumber min={1} max={100} defaultValue={10} onChange={onTimeHorizonChange} value={timeHorizon}/>\r\n                    </Space>\r\n                </Row>\r\n                </Space>\r\n                <Row style={{marginTop:20}}>\r\n                    <Space>\r\n                        <Button type=\"primary\" onClick={onClickCreateGraph}>Generate Graph</Button>\r\n                        <Button danger type=\"primary\" onClick={onClickReset}>Reset</Button>\r\n                    </Space>\r\n                </Row>\r\n          \r\n                <br/>\r\n                <h1>Instuctions </h1>\r\n                <ul>\r\n                    <li>Double click on the map to add or delete nodes</li>\r\n                    <li>To add or delete edges, click to select the source node, then toggle the switch to select target node.(edges are undirected*) </li>\r\n                    <li>You can press 'a' on the keyboard to toggle the switch when adding edges </li>\r\n                    <li>Click on the nodes to add or delete Defenders/Exits</li>\r\n                    <li>Click on the nodes to set Attacker</li>\r\n                    <li>For more details and server template, visit: https://github.com/limkaraik/NSG-Server-Template</li>\r\n                    <li>Sample server and json file can be found here: https://github.com/limkaraik/NSG-sample-server</li>\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={9}>\r\n                    <SideMenu/>\r\n                </Col>\r\n                <Col span = {15}>\r\n                \r\n                    <MapContainer center={[51.505, -0.09]} zoom={13} doubleClickZoom={false} scrollWheelZoom={true} style={{width:800, height:650, marginLeft:100, marginTop:20}}>\r\n                        <TileLayer\r\n                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <Update/>\r\n                        {/* render nodes*/ \r\n                            nodes.size>0 && \r\n                            Array.from(nodes).map((val,index) =>(\r\n                                <CircleMarker center={val} key={index} fillOpacity={0.7} interactive={true} eventHandlers={{ dblclick:(e) =>{}, click:(e)=>{}}}/>\r\n                            ))\r\n                        }\r\n                        {/* render edges*/ \r\n                            edges.size>0 && \r\n                            Array.from(edges).map((edge,index) =>(\r\n                                <Polyline  key={index} positions={[[edge[0],edge[1]],[edge[2],edge[3]]]}/>\r\n                            ))\r\n                        }\r\n                        {/* render defenders*/ \r\n                            defenders.size>0 && \r\n                            Array.from(defenders).map((val,index) =>(\r\n                                <Marker position={val} key={index}  interactive={false} icon={Police}/>\r\n                            ))\r\n                        }\r\n                        {/* render exits*/ \r\n                            exits.size>0 && \r\n                            Array.from(exits).map((val,index) =>(\r\n                                <Marker position={val} key={index}  interactive={false} icon={Exit}/>\r\n                            ))\r\n                        }\r\n                        {/* render attacker*/ \r\n                            attacker && <Marker position={attacker} icon={Robber} interactive={false}/>\r\n                        }\r\n                        \r\n                    </MapContainer>\r\n             \r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","import React from 'react';\r\nimport { Layout, Menu} from 'antd';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Play from './play';\r\nimport Create from './create';\r\nconst { Header, Content,Footer } = Layout;\r\n\r\nconst Main : React.FC = () =>{\r\n\r\n    return (\r\n        <Router>\r\n             <Layout className=\"layout\">\r\n                <Header>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\">\r\n                        <Menu.Item key=\"1\">\r\n                            Play\r\n                            <Link to=\"/NSG-Demo/\" />\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\">\r\n                            Create\r\n                            <Link to=\"/NSG-Demo/create\" />\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Header>\r\n                <Content style={{ padding: '0 50px' }}>\r\n                    <Route exact path=\"/NSG-Demo/\" component={Play} />\r\n                    <Route exact path=\"/NSG-Demo/create\" component={Create} />\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>Game Demo ©2021 Created Lim Kar Aik</Footer>\r\n            </Layout>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport \"antd/dist/antd.css\";\nimport Main from './main/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}